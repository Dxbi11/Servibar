datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["rhel-openssl-1.0.x"]
}

model Hotel {
  id         Int          @id @default(autoincrement())
  name       String
  floors     Floor[]      @relation(name: "FloorToHotel")
  rooms      Room[]       @relation(name: "HotelToRoom")
  products   Product[]    @relation(name: "HotelToProduct")
  invoices   Invoice[]    @relation(name: "HotelToInvoice")
  storehouse Storehouse[] @relation(name: "HotelToStorehouse")
}

model Floor {
  id          Int    @id @default(autoincrement())
  floorNumber Int
  hotelId     Int
  hotel       Hotel  @relation(name: "FloorToHotel", fields: [hotelId], references: [id], onDelete: Cascade)
  rooms       Room[] @relation(name: "FloorToRoom")
}

model Room {
  id           Int         @id @default(autoincrement())
  roomNumber   Int
  hotelId      Int
  floorId      Int
  hotel        Hotel       @relation(name: "HotelToRoom", fields: [hotelId], references: [id], onDelete: Cascade)
  floor        Floor       @relation(name: "FloorToRoom", fields: [floorId], references: [id], onDelete: Cascade)
  minibarItems RoomStock[] @relation(name: "RoomToRoomStock")
  locked       Boolean     @default(false)
  state        Int
  comment      String?
  checked      Boolean?

  @@unique([roomNumber, hotelId])
}

model Product {
  id           Int           @id @default(autoincrement())
  name         String
  price        Float?
  roomStocks   RoomStock[]   @relation(name: "ProductToRoomStock")
  invoiceItems InvoiceItem[] @relation(name: "InvoiceItemToProduct")
  hotel        Hotel?        @relation(name: "HotelToProduct", fields: [hotelId], references: [id], onDelete: SetNull)
  hotelId      Int?
  storehouseId Int?
  storehouse   Storehouse[]  @relation(name: "ProductToStorehouse")
}

model RoomStock {
  id        Int     @id @default(autoincrement())
  quantity  Int
  room      Room    @relation(name: "RoomToRoomStock", fields: [roomId], references: [id], onDelete: Cascade)
  roomId    Int
  product   Product @relation(name: "ProductToRoomStock", fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model Invoice {
  id      Int           @id @default(autoincrement())
  total   Float?
  items   InvoiceItem[] @relation(name: "InvoiceToInvoiceItem")
  date    DateTime      @default(now())
  hotelId Int?
  hotel   Hotel?        @relation(name: "HotelToInvoice", fields: [hotelId], references: [id], onDelete: SetNull)
  comment String?
  room    Int?
}

model InvoiceItem {
  id        Int     @id @default(autoincrement())
  invoiceId Int
  productId Int
  quantity  Int
  invoice   Invoice @relation(name: "InvoiceToInvoiceItem", fields: [invoiceId], references: [id], onDelete: Cascade)
  product   Product @relation(name: "InvoiceItemToProduct", fields: [productId], references: [id], onDelete: Cascade)
}

model Storehouse {
  id        Int     @id @default(autoincrement())
  hotel     Hotel   @relation(name: "HotelToStorehouse", fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId   Int
  quantity  Int?
  product   Product @relation(name: "ProductToStorehouse", fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}